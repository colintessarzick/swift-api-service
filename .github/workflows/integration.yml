name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  deploy-infrastructure:
    name: Deploy Terraform Stack
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform

    env:
      TF_VAR_deployment_name: swift-api-service
      TF_VAR_allowed_account_id: ${{ secrets.ALLOWED_ACCOUNT_ID }}
      GITHUB_TOKEN: ${{ secrets.PAT }}

    permissions:
      id-token: write
      contents: read
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set environment specific variables
        run: |
          if [[ ${{github.event_name}} == 'workflow_dispatch' ]]; then
            echo "TF_VAR_environment=live" >> "$GITHUB_ENV"
          else
            echo "TF_VAR_environment=test" >> "$GITHUB_ENV"
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'eu-central-1'

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ~> 1.3.0

      - name: Terraform Check Format
        id: fmt
        run: make fmt-check

      - name: Terraform Init
        id: init
        run: make init

      - name: Terraform Validate
        id: validate
        run: make validate

      - name: Terraform Plan
        timeout-minutes: 5
        id: plan
        if: github.event_name == 'pull_request'
        run: make plan
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        run: make auto-apply

  build:
    needs: deploy-infrastructure
    name: Build Application
    runs-on: ubuntu-latest

    env:
      AWS_DEFAULT_REGION: eu-central-1
      ECR_REGISTRY: ${{ secrets.ALLOWED_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com
      SWIFT_VERSION: 5.6

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set environment specific variables
        run: |
          if [[ ${{github.event_name}} == 'workflow_dispatch' ]]; then
            echo "ECR_REPOSITORY=swift-api-service-live-container-repository" >> "$GITHUB_ENV"
            echo "APP_RUNNER_ARN=${{ secrets.LIVE_APP_RUNNER_ARN }}" >> "$GITHUB_ENV"
          else
            echo "ECR_REPOSITORY=swift-api-service-test-container-repository" >> "$GITHUB_ENV"
            echo "APP_RUNNER_ARN=${{ secrets.TEST_APP_RUNNER_ARN }}" >> "$GITHUB_ENV"
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'eu-west-1'

      - name: Set up Swift ${{ env.SWIFT_VERSION }}
        uses: fwal/setup-swift@v1
        with:
          swift-version: ${{ env.SWIFT_VERSION }}
      
      - name: Load Swift Build cache
        uses: actions/cache@v3
        id: cached-build
        with:
          path: .build
          key: swift-${{ runner.os }}-${{ env.SWIFT_VERSION }}-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            swift-${{ runner.os }}-${{ env.SWIFT_VERSION }}-
            swift-${{ runner.os }}-
            swift-

      - name: Build Application
        if: steps.cached-build.outputs.cache-hit != 'true'
        id: build
        run: make build

      - name: Run tests
        id: tests
        run: make unittest
      
      - name: Login to Amazon ECR
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build, tag, and push image to Amazon ECR
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . -f ./docker/Dockerfile
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY
          echo "name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      
      - name: Deploy to App Runner
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: deploy
        run: aws apprunner start-deployment --service-arn ${{ env.APP_RUNNER_ARN }} --region eu-west-1